-- Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;

-- List the number of films per category.
SELECT 
	ca.name as category_name, 
    count(fc.film_id) as film_count
FROM 
	film_category fc
JOIN 
	category ca USING (category_ID)
GROUP BY 
	ca.name
ORDER BY 
	film_count DESC;

-- Retrieve the store ID, city, and country for each store.
SELECT 
	s.store_id,
    c.city,
    cr.country
FROM
	store s
LEFT JOIN 
	address a USING (address_id)
LEFT JOIN
	city c ON a.city_id = c.city_id
LEFT JOIN
	country cr ON c.country_id = cr.country_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT 
	s.store_id,
	sum(p.amount) as revenue
FROM
	payment p
LEFT JOIN 
	staff s ON p.staff_id = s.staff_id
GROUP BY s.store_id;
	

-- Determine the average running time of films for each category.
SELECT 
	ca.name as category_name, 
    floor(AVG(f.length)) as avg_film_length_rounded_down
FROM 
	film_category fc
LEFT JOIN 
	category ca USING (category_ID)
LEFT JOIN
	film f ON fc.film_id = f.film_id
GROUP BY 
	ca.name
ORDER BY 
	AVG(f.length) DESC;

-- Bonus: -- 

-- Identify the film categories with the longest average running time.
WITH 
	avg_film_lengths 
AS
(
SELECT 
	ca.name as category_name, 
    floor(AVG(f.length)) as avg_film_length_rounded_down,
    rank() OVER (ORDER BY AVG(f.length) DESC) as 'rnk'
FROM 
	film_category fc
LEFT JOIN 
	category ca USING (category_ID)
LEFT JOIN
	film f ON fc.film_id = f.film_id
GROUP BY 
	ca.name
ORDER BY 
	AVG(f.length) DESC
)

SELECT 
	* 
FROM 
	avg_film_lengths
WHERE
	rnk <= 10;


-- Display the top 10 most frequently rented movies in descending order.
SELECT
    F.title as film_name,
    count(r.rental_id)
FROM 
	rental r
LEFT JOIN
	inventory i ON r.inventory_id = i.inventory_id
LEFT JOIN
	film f ON i.film_id = f.film_id    
GROUP BY
	i.film_id
ORDER BY
	count(rental_id) DESC
LIMIT
	10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
select * from film;

SELECT 
    distinct(film_id),
    CASE 
		WHEN store_id=1 and film_id=(SELECT distinct(film_id) FROM film WHERE title='ACADEMY DINOSAUR')
			THEN 'available in store 1'
		ELSE 'not available'
    END AS Availabiity_Message
FROM 
	inventory
WHERE 
	film_id IN (SELECT distinct(film_id) FROM film WHERE title='ACADEMY DINOSAUR')
    AND
    store_id=1;


-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a CASE statement combined with IFNULL."

SELECT
	distinct(f.title),
    CASE
    WHEN COUNT(i.inventory_id) > 0 THEN 'available'
    ELSE 'not available'
    END AS Availibility
FROM
	film f
LEFT JOIN 
	inventory i ON f.film_id = i.film_id
GROUP BY f.title
ORDER BY COUNT(i.inventory_id) Desc;
-- HAVING COUNT(i.inventory_id) =0;
	

